1. Write a program to generate Arithmetic Exception without exception handling

def generate_exception():
    result = 10 / 0
    print(result)

generate_exception()

2. Handle the Arithmetic exception using try-catch block

def handle_exception():
    try:
        result = 10 / 0
        print(result)
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")

handle_exception()

3. Write a method which throws exception, Call that method in main class without try block

def throw_exception():
    raise ArithmeticError("This is an arithmetic exception")

throw_exception()

4. Write a program with multiple catch blocks

def multiple_exceptions():
    try:
        num1 = int(input("Enter a number: "))
        num2 = int(input("Enter another number: "))
        result = num1 / num2  
        print("Result:", result)
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
    except ValueError:
        print("Error: Invalid input! Please enter numeric values.")
    except Exception as e:
        print("An unexpected error occurred:", e)

multiple_exceptions()

5. Write a program to throw exception with your own message

def throw_custom_exception():
    raise Exception("This is a custom exception message")

throw_custom_exception()

6. Write a program to create your own exception

class CustomException(Exception):
    def __init__(self, message):
        super().__init__(message)

def raise_custom_exception():
    raise CustomException("This is a user-defined exception")

raise_custom_exception()

7. Write a program with finally block

def Except():
    try:
        num1 = int(input("Enter a number: "))
        num2 = int(input("Enter another number: "))
        result = num1 / num2  
        print("Result:", result)
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
    except ValueError:
        print("Error: Invalid input! Please enter numeric values.")
    finally:
        print("This finally block always executes, regardless of exceptions.")

Except()

8. Write a program to generate Arithmetic Exception

def generate_arithmetic_exception():
    result = 10 / 0
    
generate_arithmetic_exception()

9. Write a program to generate FileNotFoundException

def file_not_found_exception():
    with open("sample_file.txt", "r") as file:  
        content = file.read()
        print(content)

file_not_found_exception()

10. Write a program to generate ClassNotFoundException

import importlib

def class_not_found_exception():
    importlib.import_module("non_existent_module") 

class_not_found_exception()

11. Write a program to generate IOException

def io_exception():
    try:
        with open('non_existent_file.txt', 'r') as file:
            data = file.read()
    except IOError as e:
        print(f"An IOError occurred: {e}")
        
io_exception()

12. Write a program to generate NoSuchFieldException

class MyClass:
    def __init__(self):
        self.name = "Satya"

def generate_no_such_field_exception():
    obj = MyClass()
    
    try:
        print(obj.age)
    except AttributeError as e:
        print(f"A NoSuchFieldException occurred (simulated as AttributeError): {e}")

generate_no_such_field_exception()
