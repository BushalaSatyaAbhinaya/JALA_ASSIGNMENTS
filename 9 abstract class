1. Create an abstract class with abstract and non-abstract methods.
2. Create a sub class for an abstract class. Create an object in the child class for the
abstract class and access the non-abstract methods
3. Create an instance for the child class in child class and call abstract methods
4. Create an instance for the child class in child class and call non-abstract methods

from abc import ABC, abstractmethod
class Animal(ABC):
    
    @abstractmethod
    def sound(self):
        pass
    def sleep(self):
        print("This animal is sleeping.")

class Dog(Animal):
    
    def __init__(self, name):
        self.name = name
    
    def sound(self):
        return f"{self.name} says Woof!"

    
    def create_instance_and_call_abstract(self):
        dog_instance = Dog(self.name)  
        print(dog_instance.sound())    
    
    def create_instance_and_call_non_abstract(self):
        dog_instance = Dog(self.name) 
        dog_instance.sleep()            


dog = Dog("Buddy")
dog.create_instance_and_call_abstract()  
dog.create_instance_and_call_non_abstract()
